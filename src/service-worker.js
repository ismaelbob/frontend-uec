/* eslint-disable no-restricted-globals */

// This service worker can be customized!
// See https://developers.google.com/web/tools/workbox/modules
// for the list of available Workbox modules, or add any other
// code you'd like.
// You can also remove this file if you'd prefer not to use a
// service worker, and the Workbox build step will be skipped.

import { clientsClaim } from 'workbox-core';
import { ExpirationPlugin } from 'workbox-expiration';
import { precacheAndRoute, createHandlerBoundToURL } from 'workbox-precaching';
import { registerRoute } from 'workbox-routing';
import { StaleWhileRevalidate } from 'workbox-strategies';

clientsClaim();

// Precache all of the assets generated by your build process.
// Their URLs are injected into the manifest variable below.
// This variable must be present somewhere in your service worker file,
// even if you decide not to use precaching. See https://cra.link/PWA
precacheAndRoute(self.__WB_MANIFEST);

// Set up App Shell-style routing, so that all navigation requests
// are fulfilled with your index.html shell. Learn more at
// https://developers.google.com/web/fundamentals/architecture/app-shell
const fileExtensionRegexp = new RegExp('/[^/?]+\\.[^/]+$');
registerRoute(
  // Devuelva falso para eximir las solicitudes de ser cumplidas por index.html.
  ({ request, url }) => {
    // Si esto no es una navegación, omita.
    if (request.mode !== 'navigate') {
      return false;
    } // Si esta es una URL que comienza con / _, omítala.

    if (url.pathname.startsWith('/_')) {
      return false;
    } // Si parece una URL para un recurso, porque contiene // una extensión de archivo, omita.

    if (url.pathname.match(fileExtensionRegexp)) {
      return false;
    } // Devuelve verdadero para indicar que queremos usar el controlador.

    return true;
  },
  createHandlerBoundToURL(process.env.PUBLIC_URL + '/index.html')
);

// Un ejemplo de ruta de almacenamiento en caché en tiempo de ejecución para solicitudes que no son manejadas por el 
// precaché, en este caso solicitudes .png del mismo origen como las de public /
registerRoute(
  // Agregue cualquier otra extensión de archivo o criterio de enrutamiento según sea necesario.
  ({ url }) => url.origin === self.location.origin && url.pathname.endsWith('.png'), // Personalice esta estrategia según sea necesario, por ejemplo, cambiando a CacheFirst.
  new StaleWhileRevalidate({
    cacheName: 'images',
    plugins: [
      // Asegúrese de que una vez que esta caché en tiempo de ejecución alcance un tamaño máximo, 
      // se eliminen las imágenes utilizadas menos recientemente.
      new ExpirationPlugin({ maxEntries: 50 }),
    ],
  })
);

// Esto permite que la aplicación web active skipWaiting a través de registration
// .waiting.postMessage ({tipo: 'SKIP_WAITING'})
self.addEventListener('message', (event) => {
  if (event.data && event.data.type === 'SKIP_WAITING') {
    self.skipWaiting();
  }
});

// Cualquier otra lógica de service worker personalizado puede ir aquí.
const datosCanciones = [
  'https://uecapi.herokuapp.com/himjovenes/getcanciones.php',
  'https://uecapi.herokuapp.com/himpoder/getcanciones.php',
  'https://uecapi.herokuapp.com/himverde/getcanciones.php',
  'https://uecapi.herokuapp.com/cronograma/getTurnoMensual.php',
  'https://uecapi.herokuapp.com/cronograma/getTurnoJovenes.php'
]

self.addEventListener('install', event => {
  caches.open('memoria-v1')
    .then(cache => {
      return cache.addAll(datosCanciones);
    })
})


self.addEventListener('fetch', event => {
  event.respondWith(
    caches.match(event.request)
      .then(response => {
        // Encontro en cache - respuesta de retorno
        if (response) {
          return response;
        }

        // IMPORTANTE: Clona la solicitud. Una solicitud es una transmisión 
        // y solo se puede consumir una vez. Dado que estamos consumiendo esto 
        // una vez por caché y una vez por el navegador para recuperar, 
        // necesitamos clonar la respuesta.
        var fetchRequest = event.request.clone();

        return fetch(fetchRequest)
        .then(response => {
            // Comprueba si recibimos una respuesta válida.
            if(!response || response.status !== 200 || response.type !== 'basic' || response.type !== 'cors') {
              return response;
            }

            // IMPORTANTE: Clona la respuesta. Una respuesta es una secuencia y, 
            // como queremos que el navegador consuma la respuesta, así como la memoria caché 
            // que consume la respuesta, debemos clonarla para tener dos secuencias.
            var responseToCache = response.clone();

            caches.open('memoria-v1')
              .then(cache => {
                cache.put(event.request, responseToCache);
              });

            return response;
          }
        );
      })
    );
});