/* eslint-disable no-restricted-globals */

// This service worker can be customized!
// See https://developers.google.com/web/tools/workbox/modules
// for the list of available Workbox modules, or add any other
// code you'd like.
// You can also remove this file if you'd prefer not to use a
// service worker, and the Workbox build step will be skipped.

import { clientsClaim } from 'workbox-core';
import { ExpirationPlugin } from 'workbox-expiration';
import { precacheAndRoute, createHandlerBoundToURL } from 'workbox-precaching';
import { registerRoute } from 'workbox-routing';
import { StaleWhileRevalidate } from 'workbox-strategies';

clientsClaim();

// Precache all of the assets generated by your build process.
// Their URLs are injected into the manifest variable below.
// This variable must be present somewhere in your service worker file,
// even if you decide not to use precaching. See https://cra.link/PWA
precacheAndRoute(self.__WB_MANIFEST);

// Set up App Shell-style routing, so that all navigation requests
// are fulfilled with your index.html shell. Learn more at
// https://developers.google.com/web/fundamentals/architecture/app-shell
const fileExtensionRegexp = new RegExp('/[^/?]+\\.[^/]+$');
registerRoute(
  // Return false to exempt requests from being fulfilled by index.html.
  ({ request, url }) => {
    // If this isn't a navigation, skip.
    if (request.mode !== 'navigate') {
      return false;
    } // If this is a URL that starts with /_, skip.

    if (url.pathname.startsWith('/_')) {
      return false;
    } // If this looks like a URL for a resource, because it contains // a file extension, skip.

    if (url.pathname.match(fileExtensionRegexp)) {
      return false;
    } // Return true to signal that we want to use the handler.

    return true;
  },
  createHandlerBoundToURL(process.env.PUBLIC_URL + '/index.html')
);

// An example runtime caching route for requests that aren't handled by the
// precache, in this case same-origin .png requests like those from in public/
registerRoute(
  // Add in any other file extensions or routing criteria as needed.
  ({ url }) => url.origin === self.location.origin && url.pathname.endsWith('.png'), // Customize this strategy as needed, e.g., by changing to CacheFirst.
  new StaleWhileRevalidate({
    cacheName: 'images',
    plugins: [
      // Ensure that once this runtime cache reaches a maximum size the
      // least-recently used images are removed.
      new ExpirationPlugin({ maxEntries: 50 }),
    ],
  })
);

// This allows the web app to trigger skipWaiting via
// registration.waiting.postMessage({type: 'SKIP_WAITING'})
self.addEventListener('message', (event) => {
  if (event.data && event.data.type === 'SKIP_WAITING') {
    self.skipWaiting();
  }
});

// Any other custom service worker logic can go here.

const datosCanciones = [
  'https://uecapi.elementfx.com/himjovenes/getcanciones.php',
  'https://uecapi.elementfx.com/himpoder/getcanciones.php',
  'https://uecapi.elementfx.com/himverde/getcanciones.php',
  'https://uecapi.elementfx.com/cronograma/getTurnoMensual.php',
  'https://uecapi.elementfx.com/cronograma/getTurnoJovenes.php'
];

self.addEventListener('install', event => {
  event.waitUntil(
    caches.open('memoria-v1').then(cache => {
      return cache.addAll(datosCanciones);
    })
  );
});

self.addEventListener('fetch', event => {
  event.respondWith(
    caches.match(event.request).then(cachedResponse => {
      // Si hay una respuesta en caché, devolverla
      if (cachedResponse) {
        return cachedResponse;
      }

      // Si no hay respuesta en caché, intentar obtener los datos de la red
      return fetch(event.request).then(networkResponse => {
        // Verificar si la respuesta de la red es válida
        if (!networkResponse || networkResponse.status !== 200 || (networkResponse.type !== 'basic' && networkResponse.type !== 'cors')) {
          return caches.match(event.request);
        }

        // Clonar la respuesta de la red
        const networkResponseClone = networkResponse.clone();

        // Comparar los datos de la red con los datos en caché
        return caches.open('memoria-v1').then(cache => {
          return cache.match(event.request).then(cachedResponse => {
            if (!cachedResponse || !responsesAreEqual(cachedResponse, networkResponseClone)) {
              cache.put(event.request, networkResponseClone);
            }
            return networkResponse;
          });
        });
      }).catch(() => {
        // Si la red falla, devolver la respuesta en caché
        return caches.match(event.request);
      });
    })
  );
});

// Función para comparar dos respuestas
function responsesAreEqual(response1, response2) {
  return response1.headers.get('content-length') === response2.headers.get('content-length') &&
         response1.headers.get('etag') === response2.headers.get('etag');
}